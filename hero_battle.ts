
// Enum –¥–ª—è —Ç–∏–ø—ñ–≤ –≥–µ—Ä–æ—ó–≤
enum HeroType {
    Warrior = "WARRIOR",
    Mage = "MAGE",
    Archer = "ARCHER",
}

// Enum –¥–ª—è —Ç–∏–ø—ñ–≤ –∞—Ç–∞–∫
enum AttackType {
    Physical = "PHYSICAL",
    Magical = "MAGICAL",
    Ranged = "RANGED",
}

// Interface –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è
interface HeroStats {
    health: number;
    attack: number;
    defense: number;
    speed: number;
}

// Interface –¥–ª—è –≥–µ—Ä–æ—è
interface Hero {
    id: number;
    name: string;
    type: HeroType;
    attackType: AttackType;
    stats: HeroStats;
    isAlive: boolean;
}

// Type –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∞—Ç–∞–∫–∏
type AttackResult = {
    damage: number;
    isCritical: boolean;
    remainingHealth: number;
};

let heroIdCounter = 1;

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è
function createHero(name: string, type: HeroType): Hero {
    let stats: HeroStats;
    let attackType: AttackType;

    switch (type) {
        case HeroType.Warrior:
            stats = { health: 120, attack: 15, defense: 10, speed: 5 };
            attackType = AttackType.Physical;
            break;
        case HeroType.Mage:
            stats = { health: 80, attack: 25, defense: 5, speed: 7 };
            attackType = AttackType.Magical;
            break;
        case HeroType.Archer:
            stats = { health: 100, attack: 20, defense: 7, speed: 10 };
            attackType = AttackType.Ranged;
            break;
        default:
            throw new Error("Unknown hero type");
    }

    return {
        id: heroIdCounter++,
        name,
        type,
        attackType,
        stats,
        isAlive: true,
    };
}

// –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è
function calculateDamage(attacker: Hero, defender: Hero): AttackResult {
    const baseDamage = attacker.stats.attack - defender.stats.defense;
    const isCritical = Math.random() < 0.2; // 20% —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —É–¥–∞—Ä—É
    const totalDamage = isCritical ? baseDamage * 2 : baseDamage;
    const finalDamage = Math.max(0, totalDamage);

    defender.stats.health -= finalDamage;
    if (defender.stats.health <= 0) defender.isAlive = false;

    return {
        damage: finalDamage,
        isCritical,
        remainingHealth: Math.max(0, defender.stats.health),
    };
}

// Generic —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≥–µ—Ä–æ—è –≤ –º–∞—Å–∏–≤—ñ
function findHeroByProperty<T extends keyof Hero>(
    heroes: Hero[],
    property: T,
    value: Hero[T]
): Hero | undefined {
    return heroes.find((hero) => hero[property] === value);
}

// –§—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ä–∞—É–Ω–¥—É –±–æ—é –º—ñ–∂ –≥–µ—Ä–æ—è–º–∏
function battleRound(hero1: Hero, hero2: Hero): string {
    if (!hero1.isAlive || !hero2.isAlive) {
        return `${hero1.name} –∞–±–æ ${hero2.name} –≤–∂–µ –Ω–µ –º–æ–∂—É—Ç—å –±–∏—Ç–∏—Å—å.`;
    }

    const attacker = hero1.stats.speed >= hero2.stats.speed ? hero1 : hero2;
    const defender = attacker === hero1 ? hero2 : hero1;

    const result = calculateDamage(attacker, defender);

    return `‚úÖ ${attacker.name} –∞—Ç–∞–∫—É—î ${defender.name} —ñ –∑–∞–≤–¥–∞—î **${result.damage}** ${
        result.isCritical ? "(üî• –ö—Ä–∏—Ç–∏—á–Ω–∏–π —É–¥–∞—Ä!)" : ""
    }. üõ°Ô∏è ${defender.name} –º–∞—î **${result.remainingHealth}** –∑–¥–æ—Ä–æ–≤'—è.`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –ø—ñ–¥—Å—É–º–∫—ñ–≤ –±–æ—é
function printBattleSummary(heroes: Hero[]) {
    console.log("\nüèÜ --- –ü–Ü–î–°–£–ú–ö–ò –ë–û–Æ --- üèÜ");

    heroes.forEach((hero) => {
        console.log(
            `üîπ ${hero.name} (${hero.type}) | ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: ${hero.stats.health} | ${
                hero.isAlive ? "‚úÖ –ñ–∏–≤–∏–π" : "üíÄ –ú–µ—Ä—Ç–≤–∏–π"
            }`
        );
    });

    console.log("üîö --- –ë–Ü–ô –ó–ê–í–ï–†–®–ï–ù–û --- üîö\n");
}

// ==========================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
// ==========================

// –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –≥–µ—Ä–æ—ó–≤
const heroes: Hero[] = [
    createHero("–î–º–∏—Ç—Ä–æ", HeroType.Warrior),
    createHero("–ú–µ—Ä–ª—ñ–Ω", HeroType.Mage),
    createHero("–õ–µ–æ–Ω–∞", HeroType.Archer),
];

// –ü–æ—à—É–∫ –≥–µ—Ä–æ—è –∑–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é
const foundHero = findHeroByProperty(heroes, "type", HeroType.Mage);
console.log("üîç –ó–Ω–∞–π–¥–µ–Ω–∏–π –≥–µ—Ä–æ–π:", foundHero);

// –ü—Ä–æ–≤–æ–¥–∏–º–æ –∫—ñ–ª—å–∫–∞ —Ä–∞—É–Ω–¥—ñ–≤ –±–æ—é
console.log("--- –ü–æ—á–∞—Ç–æ–∫ –±–æ—é ---");
console.log(battleRound(heroes[0], heroes[1]));
console.log(battleRound(heroes[1], heroes[2]));

// –í–∏–≤—ñ–¥ –ø—ñ–¥—Å—É–º–∫—ñ–≤
printBattleSummary(heroes);
